; using mutex
(define (make-semaphore n)
    (let ((mutex (make-mutex)))
        (define (the-semaphore m)
            (cond ((eq? m 'acquire)
                   (mutex 'acquire)
                   (if (= n 0)
                       (begin (mutex 'release) 
                              (the-semaphore 'acquire))
                       (begin (set! n (- n 1)) 
                              (mutex 'release))))
                  ((eq? m 'release)
                   (mutex 'acquire)
                   (set! n (+ n 1))
                   (mutex 'release))))
        the-semaphore))

; using test-and-set
(define (make-semaphore n)
    (let ((cell (list false)))
        (define (the-semaphore m)
            (cond ((eq? m 'acquire)
                   (if (test-and-set! cell)
                       (the-semaphore 'acquire)
                       (if (= n 0)
                           (begin (clear! cell)
                                  (the-semaphore 'acquire))
                           (begin (set! n (- n 1))
                                  (clear! cell)))))
                  ((eq? m 'release)
                   (if (test-and-set! cell)
                       (the-semaphore 'release)
                       (begin (set! n (+ n 1))
                              (clear! cell))))))
        the-semaphore))