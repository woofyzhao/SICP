(load "ch2_interval.scm")

(define (mul-interval x y)
    (let ((p1 (* (lower-bound x) (lower-bound y)))
          (p2 (* (lower-bound x) (upper-bound y)))
          (p3 (* (upper-bound x) (lower-bound )))
          (p4 (* (upper-bound x) (upper-boundy y))))
        (make-interval (min p1 p2 p3 p4) 
                       (max p1 p2 p3 p4))))

(define (mul-interval x y)
    (let ((x1 (lower-bound x))
          (x2 (upper-bound x))
          (y1 (lower-bound y))
          (y2 (upper-bound y)))
        (cond ((and (>= x1 0) (>= x2 0)) 
               (cond ((and (>= y1 0) (>= y2 0)) (make-interval (* x1 y1) (* x2 y2)))
                     ((and (<= y1 0) (<= y2 0)) (make-interval (* x2 y1) (* x1 y2)))
                     (else (make-interval (* x2 y1) (* x2 y2)))))
              ((and (<= x1 0) (<= x2 0))
               (cond ((and (>= y1 0) (>= y2 0)) (make-interval (* x1 y2) (* x2 y1)))
                     ((and (<= y1 0) (<= y2 0)) (make-interval (* x2 y2) (* x1 y1)))
                     (else (make-interval (* x1 y2) (* x1 y1)))))
              (else
               (cond ((and (>= y1 0) (>= y2 0)) (make-interval (* x1 y2) (* x2 y2)))
                     ((and (<= y1 0) (<= y2 0)) (make-interval (* x2 y1) (* x1 y1)))
                     (else (make-interval (min (* x1 y2) (* x2 y1))
                                          (max (* x1 y1) (* x2 y2)))))))))

(print-interval (mul-interval (make-interval -1 2)
                              (make-interval -3 4)))