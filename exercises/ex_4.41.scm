(define baker 0)
(define cooper 1)
(define fletcher 2)
(define miller 3)
(define smith 4)

(define (list-ref s n)
    (cond ((null? s) false)
          ((= n 0) (car s))
          (else (list-ref (cdr s) (- n 1)))))

(define (floor who partial head)
    (list-ref partial (- head who)))

(define (check set who)
    (let ((baker-floor (floor baker set who))
          (cooper-floor (floor cooper set who))
          (fletcher-floor (floor fletcher set who))
          (miller-floor (floor miller set who))
          (smith-floor (floor smith set who)))
        ;(display (list "checking..." set who))
        (cond ((= who baker) (not (= baker-floor 5)))
              ((= who cooper) 
               (and (not (= cooper-floor baker-floor))
                    (not (= cooper-floor 1))))
              ((= who fletcher)
               (and (not (= fletcher-floor cooper-floor))
                    (not (= fletcher-floor baker-floor))
                    (not (= fletcher-floor 1))
                    (not (= fletcher-floor 5))
                    (not (= (abs (- fletcher-floor cooper-floor)) 1))))
              ((= who miller)
               (and (not (= miller-floor fletcher-floor))
                    (not (= miller-floor cooper-floor))
                    (not (= miller-floor baker-floor))
                    (> miller-floor cooper-floor)))
              ((= who smith)
               (and (not (= smith-floor miller-floor))
                    (not (= smith-floor fletcher-floor))
                    (not (= smith-floor cooper-floor))
                    (not (= smith-floor baker-floor))
                    (not (= (abs (- smith-floor fletcher-floor)) 1))))
              (else (error "invalid dweller " who)))))

(define (try-dwell)
    (define (place who floor result)
        (if (> who smith)
            (display result)
            (let ((next (cons floor result)))
                (if (check next who)
                    (place (+ who 1) 1 next))
                (if (< floor 5)
                    (place who (+ floor 1) result)))))
    (place 0 1 '()))

(try-dwell)
; (1 5 4 2 3)